# -*- coding: utf-8 -*-
# @Author: dongqing
# @Date:   2023-10-14 13:34:46
# @Last Modified by:   dongqing
# @Last Modified time: 2023-10-14 13:43:36


import os
import sys
import logging
import argparse as ap

from Cellist.version import __version__
from Cellist.Segmentation import CommandLineParser, Cellist

def main():
    """
    Add main function argument parsers.
    """
    parser = ap.ArgumentParser(description = "Cellist (Cell identification in high-resolution Spatial Transcriptomics) is a cell segmentation tool for high-resolution spatial transcriptomics. ")
    parser.add_argument("-v", "--version", action = "store_true", help = "Print version info.")

    subparsers = parser.add_subparsers(dest = "subcommand")
    CommandLineParser(subparsers)

    logging.basicConfig(format="%(levelname)s: %(message)s", stream=sys.stderr)
    args = parser.parse_args()

    version = __version__

    if args.version:
        print(version)
        exit(0)
    elif args.subcommand == "seg":
        spot_expr_file = args.spot_expr_file
        all_spot_count_h5_file = args.all_spot_count_h5_file
        props_file = args.props_file
        nucleus_count_h5_file = args.nucleus_count_h5_file
        watershed_coord_file = args.watershed_coord_file
        patch_data_dir = args.patch_data_dir
        num_workers = args.num_workers
        max_dist = args.max_dist
        neigh_dist = args.neigh_dist
        prob_cutoff = args.prob_cutoff
        alpha = args.alpha
        sigma = args.sigma
        beta = args.beta
        gene_use = args.gene_use
        iter_or_not = args.iter_or_not
        Cellist(props_file = args.props_file, nucleus_count_h5_file = args.nucleus_count_h5_file, 
            watershed_coord_file = args.watershed_coord_file, all_spot_count_h5_file = args.all_spot_count_h5_file, 
            spot_expr_file = args.spot_expr_file, patch_data_dir = args.patch_data_dir, num_workers = args.num_workers, 
            alpha = args.alpha, sigma = args.sigma, beta = args.beta, 
            gene_use = args.gene_use, max_dist = args.max_dist, 
            iter_or_not = args.iter_or_not, prob_cutoff = args.prob_cutoff, neigh_dist = args.neigh_dist)
    else:
        parser.print_help()
        exit(1)
    exit(0)

if __name__ == "__main__":
    main()
